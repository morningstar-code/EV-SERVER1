(()=>{"use strict";var e={567:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.updateBusinessOwner=t.updateBusinessName=t.getBusinessEmploymentHistory=t.getEmployeesByBusinessId=t.getBusinesses=void 0;const i=r(286);t.getBusinesses=async e=>{const[t,r]=await i.Repository.getBusinesses();return{message:r,success:t}},t.getEmployeesByBusinessId=async e=>{const[t,r]=await i.Repository.getEmployeesByBusinessId(e.businessId);return{message:r,success:t}},t.getBusinessEmploymentHistory=async e=>{const[t,r]=await i.Repository.getBusinessEmploymentHistory(e.businessId);return{message:{history:r},success:t}},t.updateBusinessName=async e=>{const[t,r]=await i.Repository.updateBusinessName(e);return{message:r,success:t}},t.updateBusinessOwner=async e=>{const[t,r]=await i.Repository.updateBusinessOwner(e);return{message:r,success:t}}},306:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.editCert=t.getCerts=void 0;const i=r(286);t.getCerts=async e=>({message:await i.Repository.getCerts(),success:!0}),t.editCert=async e=>({message:await i.Repository.editCert(e),success:!0})},102:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getCharges=void 0;const i=r(286);t.getCharges=async e=>{const[t,r]=await i.Repository.getCharges();return{message:r,success:t}}},482:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.addInvItem=t.updateConfigOption=t.insertConfigOption=t.getAllConfigOptions=t.hasConfigPermission=t.getRolePermissions=t.addRolePermission=void 0;const i=r(286);t.addRolePermission=async e=>{const[t,r]=await i.Repository.addRolePermission(e);return{message:r,success:t}},t.getRolePermissions=async e=>{const[t,r]=await i.Repository.getRolePermissions(e);return{message:r,success:t}},t.hasConfigPermission=async(e,t)=>{const[r,a]=await i.Repository.hasConfigPermission(e,t);return console.log("hasConfigPermission",r,a),{message:{steam:r,steam_id:a},success:!0}},t.getAllConfigOptions=async e=>{const[t,r]=await i.Repository.getAllConfigOptions(e);return{message:r,success:t}},t.insertConfigOption=async e=>{const[t,r]=await i.Repository.insertConfigOption(e);return{message:r,success:t}},t.updateConfigOption=async e=>{const[t,r]=await i.Repository.updateConfigOption(e);return{message:r,success:t}},t.addInvItem=async(e,t)=>null==t.item||null==t.item?{message:"Item is required",success:!1}:(emitNet("player:receiveItem",e,t.item,t.information),{message:"Item added",success:!0})},30:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getBulletins=t.getBolos=t.getWarrants=void 0;const i=r(286);t.getWarrants=async e=>{const[t,r]=await i.Repository.getWarrants();return{message:r,success:t}},t.getBolos=async e=>{const[t,r]=await i.Repository.getBolos();return{message:r,success:t}},t.getBulletins=async e=>{const[t,r]=await i.Repository.getBulletins();return{message:r,success:t}}},381:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.editEvidence=t.getSingleEvidence=t.getEvidence=void 0;const i=r(286);t.getEvidence=async e=>{const[t,r]=await i.Repository.getEvidence(e);return{message:r,success:t}},t.getSingleEvidence=async e=>{const[t,r]=await i.Repository.getSingleEvidence(e);return{message:r,success:t}},t.editEvidence=async e=>{const[t,r]=await i.Repository.editEvidence(e);return{message:r,success:t}}},127:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.editCivilianProfile=t.resetDrivingPoints=t.expungeCiv=t.updateImpoundData=t.changeVehicleData=t.getCivilianProfile=t.getCivilianProfilesPublic=t.getCivilianProfiles=t.getOfficerProfiles=void 0;const i=r(286);t.getOfficerProfiles=async e=>{const[t,r]=await i.Repository.getOfficerProfiles();return{message:r,success:t}},t.getCivilianProfiles=async e=>{const[t,r]=await i.Repository.getCivilianProfiles(e.name);return{message:r,success:t}},t.getCivilianProfilesPublic=async e=>{const[t,r]=await i.Repository.getCivilianProfilesPublic(e.name);return{message:r,success:t}},t.getCivilianProfile=async e=>{const[t,r]=await i.Repository.getCivilianProfile(e.profile.id);return{message:r,success:t}},t.changeVehicleData=async e=>{const[t,r]=await i.Repository.changeVehicleData(e);return{message:r,success:t}},t.updateImpoundData=async e=>{const[t,r]=await i.Repository.updateImpoundData(e);return{message:r,success:t}},t.expungeCiv=async e=>{const[t,r]=await i.Repository.expungeCiv(e);return{message:r,success:t}},t.resetDrivingPoints=async e=>{const[t,r]=await i.Repository.resetDrivingPoints(e);return{message:r,success:t}},t.editCivilianProfile=async(e,t=!1)=>{const[r,a]=await i.Repository.editCivilianProfile(e,t);return{message:a,success:r}},r.g.exports("createCivilianProfile",((e,r)=>{(0,t.editCivilianProfile)({character_id:e,name:r,profile_image_url:"",summary:"",parole_end_timestamp:0,driving_license_points_start_date:0,drivers_points:0,is_wanted:!1,tags:[],priors:[]},!0)}))},474:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.searchIncidents=t.exportIncidentCiv=t.removeIncidentCiv=t.editIncidentCivCharges=t.editIncidentCiv=t.editIncident=t.getIncident=t.getIncidents=void 0;const i=r(286);t.getIncidents=async e=>{const[t,r]=await i.Repository.getIncidents(e);return{message:r,success:t}},t.getIncident=async e=>{const[t,r]=await i.Repository.getIncident(e.id);return{message:r,success:t}},t.editIncident=async(e,t)=>{const[r,a]=await i.Repository.editIncident(e,t);return{message:a,success:r}},t.editIncidentCiv=async e=>{const[t,r]=await i.Repository.editIncidentCiv(e);return{message:r,success:t}},t.editIncidentCivCharges=async e=>{const[t,r]=await i.Repository.editIncidentCivCharges(e);return{message:r,success:t}},t.removeIncidentCiv=async e=>{const[t,r]=await i.Repository.removeIncidentCiv(e);return{message:r,success:t}},t.exportIncidentCiv=async e=>{},t.searchIncidents=async e=>{const[t,r]=await i.Repository.searchIncidents(e);return{message:r,success:t}}},316:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createEvidenceVehicle=t.addEvidenceToResource=t.deleteResourceItem=t.removeResourceLink=t.addResourceLink=void 0;const i=r(286);t.addResourceLink=async e=>{const[t,r]=await i.Repository.addResourceLink(e);return{message:t?"Successfully added resource link":"Failed to add resource link",success:t}},t.removeResourceLink=async e=>{const[t,r]=await i.Repository.removeResourceLink(e);return{message:t?"Successfully removed resource link":"Failed to remove resource link",success:t}},t.deleteResourceItem=async e=>{const[t,r]=await i.Repository.deleteResourceItem(e);return{message:t?"Successfully deleted resource item":"Failed to delete resource item",success:t}},t.addEvidenceToResource=async e=>{const[t,r]=await i.Repository.addEvidenceToResource(e);return{message:t?"Successfully added evidence to resource":"Failed to add evidence to resource",success:t}},t.createEvidenceVehicle=async e=>{const[t,r]=await i.Repository.createEvidenceVehicle(e);return{message:t?"Successfully created evidence vehicle":"Failed to create evidence vehicle",success:t}}},256:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.searchReports=t.editReport=t.getReport=t.getReports=t.getReportCategories=t.promoteReport=t.exportReport=void 0;const i=r(286);t.exportReport=async e=>({message:"Not implemented",success:!1}),t.promoteReport=async e=>{const[t,r]=await i.Repository.promoteReport(e);return{message:r,success:t}},t.getReportCategories=async e=>{const[t,r]=await i.Repository.getReportCategories();return{message:r,success:t}},t.getReports=async e=>{const[t,r]=await i.Repository.getReports(e);return{message:r,success:t}},t.getReport=async e=>{const[t,r]=await i.Repository.getReport(e.id);return{message:r,success:t}},t.editReport=async(e,t)=>{const[r,a]=await i.Repository.editReport(e,t);return{message:a,success:r}},t.searchReports=async e=>{const[t,r]=await i.Repository.searchReports(e);return{message:r,success:t}}},861:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.editTag=t.getTagCategories=t.getTags=void 0;const i=r(286);t.getTags=async e=>({message:await i.Repository.getTags(),success:!0}),t.getTagCategories=async e=>({message:await i.Repository.getTagCategories(),success:!0}),t.editTag=async e=>({message:await i.Repository.editTag(e),success:!0})},558:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InitEvents=void 0;const i=r(567),a=r(102),s=r(482),n=r(127),c=r(316),o=r(256),d=r(861),_=r(30),p=r(306),l=r(381),u=r(474);t.InitEvents=async()=>{},RPC.register("ev-ui:mdtApiRequest",((e,t)=>{let r={message:null,success:!1};switch(t.action){case"getTags":r=(0,d.getTags)(t.data);break;case"getTagCategories":r=(0,d.getTagCategories)(t.data);break;case"editTag":r=(0,d.editTag)(t.data);break;case"getCerts":r=(0,p.getCerts)(t.data);break;case"editCert":r=(0,p.editCert)(t.data);break;case"getOfficerProfiles":r=(0,n.getOfficerProfiles)(t.data);break;case"getCivilianProfiles":r=(0,n.getCivilianProfiles)(t.data);break;case"getCivilianProfilesPublic":r=(0,n.getCivilianProfilesPublic)(t.data);break;case"getCivilianProfile":r=(0,n.getCivilianProfile)(t.data);break;case"getPropertyOwnershipHistory":case"getVehicleImpounds":case"getVehicleOwnershipHistory":break;case"getBusinesses":r=(0,i.getBusinesses)(t.data);break;case"getEmployeesByBusinessId":r=(0,i.getEmployeesByBusinessId)(t.data);break;case"getBusinessEmploymentHistory":r=(0,i.getBusinessEmploymentHistory)(t.data);break;case"updateBusinessName":r=(0,i.updateBusinessName)(t.data);break;case"updateBusinessOwner":r=(0,i.updateBusinessOwner)(t.data);break;case"getCharges":r=(0,a.getCharges)(t.data);break;case"addInvItem":r=(0,s.addInvItem)(e,t.data);break;case"addRolePermission":r=(0,s.addRolePermission)(t.data);break;case"getRolePermissions":r=(0,s.getRolePermissions)(t.data);break;case"hasConfigPermission":r=(0,s.hasConfigPermission)(e,t.data);break;case"getAllConfigOptions":r=(0,s.getAllConfigOptions)(t.data);break;case"insertConfigOption":r=(0,s.insertConfigOption)(t.data);break;case"updateConfigOption":r=(0,s.updateConfigOption)(t.data);break;case"getIncident":r=(0,u.getIncident)(t.data);break;case"getIncidents":r=(0,u.getIncidents)(t.data);break;case"editIncident":r=(0,u.editIncident)(e,t.data);break;case"editIncidentCiv":r=(0,u.editIncidentCiv)(t.data);break;case"editIncidentCivCharges":r=(0,u.editIncidentCivCharges)(t.data);break;case"removeIncidentCiv":r=(0,u.removeIncidentCiv)(t.data);break;case"exportIncidentCiv":r=(0,u.exportIncidentCiv)(t.data);break;case"searchIncidents":r=(0,u.searchIncidents)(t.data);break;case"getReport":r=(0,o.getReport)(t.data);break;case"getReports":r=(0,o.getReports)(t.data);break;case"editReport":r=(0,o.editReport)(e,t.data);break;case"searchReports":r=(0,o.searchReports)(t.data);break;case"exportReport":r=(0,o.exportReport)(t.data);break;case"promoteReport":r=(0,o.promoteReport)(t.data);break;case"getReportCategories":r=(0,o.getReportCategories)(t.data);break;case"getWarrants":r=(0,_.getWarrants)(t.data);break;case"getBolos":r=(0,_.getBolos)(t.data);break;case"getBulletins":r=(0,_.getBulletins)(t.data);break;case"getEvidence":r=(0,l.getEvidence)(t.data);break;case"getSingleEvidence":r=(0,l.getSingleEvidence)(t.data);break;case"editEvidence":r=(0,l.editEvidence)(t.data);break;case"createEvidenceVehicle":r=(0,c.createEvidenceVehicle)(t.data);break;case"changeVehicleData":r=(0,n.changeVehicleData)(t.data);break;case"updateImpoundData":r=(0,n.updateImpoundData)(t.data);break;case"expungeCiv":r=(0,n.expungeCiv)(t.data);break;case"resetDrivingPoints":r=(0,n.resetDrivingPoints)(t.data);break;case"editCivilianProfile":r=(0,n.editCivilianProfile)(t.data);break;case"addResourceLink":r=(0,c.addResourceLink)(t.data);break;case"removeResourceLink":r=(0,c.removeResourceLink)(t.data);break;case"deleteResourceItem":r=(0,c.deleteResourceItem)(t.data);break;case"addEvidenceToResource":r=(0,c.addEvidenceToResource)(t.data)}return r})),RegisterCommand("generateprofile",(async()=>{}),!1)},741:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Init=void 0;const i=r(558);t.Init=async()=>{await(0,i.InitEvents)()}},286:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Repository=void 0;const i=r(988);t.Repository=class{static async getCharges(){const e=await SQL.execute("\n            SELECT\n                _mdt_charge.*,\n                _mdt_charge_category.name AS category_title\n            FROM\n                _mdt_charge\n                JOIN _mdt_charge_category ON _mdt_charge.charge_category_id = _mdt_charge_category.id;        \n        ");return e?[!0,e]:[!1,[]]}static async getBusinesses(){const e=await SQL.execute("SELECT * FROM _business");return e?[!0,e.map((e=>({id:e.code,name:e.name,type_id:e.type_id,account_id:e.account_id})))]:[!1,[]]}static async getEmployeesByBusinessId(e){if(!await SQL.execute("SELECT * FROM _business WHERE code = ?",[e]))return[!1,[]];const t=await SQL.execute("\n            SELECT\n                be.*,\n                br.name as role,\n                br.permissions,\n                c.first_name,\n                c.last_name\n            FROM\n                _business_employee be\n                LEFT JOIN _business_role br ON br.id = be.role_id\n                LEFT JOIN characters c ON c.id = be.cid\n            WHERE\n            be.code = ? \n        ",[e]);return t?[!0,t.map((e=>({id:e.cid,first_name:e.first_name,last_name:e.last_name,role:e.role})))]:[!1,[]]}static async getBusinessEmploymentHistory(e){const t=await SQL.execute("\n            SELECT\n                bl.id,\n                bl.code,\n                bl.event,\n                bl.invoker_id,\n                bl.target_id,\n                bl.role_id,\n                bl.amount,\n                bl.event_time,\n                COALESCE(r.name, bl.old_role, 'Undefined') AS role,\n                CONCAT(c.first_name, ' ', c.last_name) AS invoker,\n                CONCAT(t.first_name, ' ', t.last_name) AS target\n            FROM\n                _business_log bl\n                LEFT JOIN characters c ON c.id = bl.invoker_id\n                LEFT JOIN characters t ON t.id = bl.target_id\n                LEFT JOIN _business_role r ON r.id = bl.role_id\n            WHERE\n                bl.code = ?\n            ORDER BY\n                bl.id DESC\n        ",[e]);return t?[!0,t]:[!1,[]]}static async updateBusinessName(e){const t=e.name.toLowerCase().replace(/ /g,"_");return await SQL.execute("UPDATE _business SET name = ?, code = ? WHERE account_id = ? AND code = ?",[e.name,t,e.accountId,e.businessId])&&await SQL.execute("UPDATE _business_employee SET code = ? WHERE code = ?",[t,e.businessId])&&await SQL.execute("UPDATE _business_role SET code = ? WHERE code = ?",[t,e.businessId])&&await SQL.execute("UPDATE _business_log SET code = ? WHERE code = ?",[t,e.businessId])?[!0,{}]:[!1,{}]}static async updateBusinessOwner(e){const t=await SQL.execute("SELECT * FROM _business_role WHERE code = ? AND name = ?",[e.businessId,"Owner"]);return t&&await SQL.execute("UPDATE _business_employee SET cid = ? WHERE code = ? AND role_id = ?",[e.ownerId,e.businessId,t[0].id])&&await SQL.execute("UPDATE _account_access SET character_id = ? WHERE account_id = ? AND is_owner = 1",[e.ownerId,e.accountId])?[!0,{}]:[!1,{}]}static async getOfficerRoles(e){const t=await SQL.execute("\n            SELECT \n                por.id,\n                por.name,\n                por.icon,\n                por.color,\n                por.color_text,\n                por.permissions\n            FROM\n                _mdt_profile_officer_role por\n                LEFT JOIN _mdt_role_access ra ON por.id = ra.role_id\n            WHERE\n                ra.profile_id = ?\n        ",[e]);return t?[!0,t]:[!1,[]]}static async getOfficerProfiles(){const e=await SQL.execute("\n            SELECT\n                p.id as profile_id,\n                p.character_id,\n                p.alias,\n                CONCAT(c.first_name, ' ', c.last_name) AS name,\n                p.callsign,\n                d.name as department,\n                r.name as rank,\n                p.profile_image_url,\n                p.phone_number,\n                GROUP_CONCAT(DISTINCT por.permissions SEPARATOR ',') as permissions\n            FROM\n                _mdt_profile_officer p\n                LEFT JOIN _mdt_department d ON p.department_id = d.id\n                LEFT JOIN _mdt_rank r ON p.rank_id = r.id\n                LEFT JOIN _mdt_role_access ra ON p.id = ra.profile_id\n                LEFT JOIN _mdt_profile_officer_role por ON ra.role_id = por.id\n                LEFT JOIN characters c ON p.character_id = c.id\n            GROUP BY\n                p.character_id,\n                p.alias,\n                c.first_name,\n                c.last_name,\n                p.callsign,\n                d.name,\n                r.name,\n                p.profile_image_url,\n                p.phone_number\n        ");if(!e)return[!1,[]];const t=e.map((async e=>{const[t,r]=await this.getOfficerRoles(e.profile_id);return{profile_id:e.profile_id,character_id:e.character_id,alias:e.alias,name:e.name,callsign:e.callsign,rank:e.rank,department:e.department,roles:r,permissions:[],profile_image_url:e.profile_image_url,phone_number:e.phone_number}}));return[!0,await Promise.all(t)]}static async getCivilianProfiles(e){const t=await SQL.execute("SELECT * FROM _mdt_profile_civ WHERE character_id LIKE ? OR name LIKE ?",[`%${e}%`,`%${e}%`]);return t?[!0,t.map((e=>({id:e.character_id,name:e.name,profile_image_url:e.profile_image_url,is_wanted:e.is_wanted})))]:[!1,[]]}static async getCivilianProfilesPublic(e){const t=await SQL.execute("SELECT * FROM _mdt_profile_civ WHERE character_id LIKE ? OR name LIKE ?",[`%${e}%`,`%${e}%`]);return t&&0!==t.length?[!0,t.map((e=>({id:e.character_id,name:e.name})))]:[!1,[]]}static async getCivilianProfile(e){var t,r;const i=await SQL.execute("SELECT * FROM _mdt_profile_civ WHERE character_id = ?",[e]);if(!i)return[!1,{}];const a=await SQL.execute("SELECT * FROM _mdt_profile_civ_tags WHERE character_id = ?",[e]);if(!a)return[!1,{}];const s=a.map((async e=>{const t=e.tag_id,r=await SQL.execute("SELECT * FROM _mdt_tag WHERE id = ?",[t]);return r&&await SQL.execute("SELECT * FROM _mdt_tag_category WHERE id = ?",[r[0].category_id])?{id:r[0].id,name:r[0].name,color:r[0].color,color_text:r[0].color_text,icon:r[0].icon}:[!1,{}]})),n=null!==(t=await Promise.all(s))&&void 0!==t?t:[],c=await SQL.execute("SELECT charge_id FROM _mdt_prior WHERE character_id = ?",[e]);if(!c)return[!1,{}];const o=c.map((async e=>{const t=e.charge_id,r=await SQL.execute("SELECT * FROM _mdt_charge WHERE id = ?",[t]);return r?{charge_id:t,name:r[0].name}:[!1,{}]})),d=null!==(r=await Promise.all(o))&&void 0!==r?r:[],_=i[0];return[!0,{id:_.character_id,character_id:_.character_id,name:_.name,profile_image_url:_.profile_image_url,summary:_.summary,parole_end_timestamp:_.parole_end_timestamp,driving_license_points_start_date:_.driving_license_points_start_date,drivers_points:_.drivers_points,is_wanted:_.is_wanted,tags:n,priors:d}]}static async promoteReport(e){if(!e.id)return[!1,[]];if(!await SQL.execute("SELECT * FROM _mdt_report WHERE id = ?",[e.id]))return[!1,[]];if(!await SQL.execute("UPDATE _mdt_report SET report_category_id = ?, report_category_name = ? WHERE id = ?",[1,"Incident Report",e.id]))return[!1,[]];const t=await SQL.execute("SELECT * FROM _mdt_report WHERE id = ?",[e.id]);return t?[!0,t]:[!1,[]]}static async getReportCategories(){const e=await SQL.execute("SELECT * FROM _mdt_report_category");return e?[!0,e.map((e=>({id:e.id,name:e.name,description:e.description,template:e.template})))]:[!1,[]]}static async getReports(e){let t=[];return t=e.report_category_id&&0!=e.report_category_id?e.title?await SQL.execute("SELECT * FROM _mdt_report WHERE report_category_id = ? AND title LIKE ? ORDER BY id DESC",[e.report_category_id,`%${e.title}%`]):await SQL.execute("SELECT * FROM _mdt_report WHERE report_category_id = ? ORDER BY id DESC",[e.report_category_id]):e.title?await SQL.execute("SELECT * FROM _mdt_report WHERE title LIKE ? AND NOT id = ? OR NOT id = ? ORDER BY id DESC",[`%${e.title}%`,1,7]):await SQL.execute("SELECT * FROM _mdt_report WHERE NOT id = ? OR NOT id = ? ORDER BY id DESC",[1,7]),t?[!0,t.map((e=>({id:e.id,title:e.title,description:e.description,created_by_state_id:e.created_by_state_id,created_by_name:e.created_by_name,timestamp:e.timestamp,report_category_id:e.report_category_id,report_category_name:e.report_category_name})))]:[!1,[]]}static async getReport(e){return[!0,(await SQL.execute("\n            SELECT \n                r.id, \n                r.title, \n                r.description, \n                r.created_by_state_id, \n                r.created_by_name, \n                r.timestamp, \n                r.report_category_id, \n                r.report_category_name, \n                CASE WHEN c.report_id IS NOT NULL THEN Json_arrayagg(\n                Json_object(\n                    'character_id', c.character_id,\n                    'warrant', c.warrant,\n                    'warrant_expiry_timestamp', c.warrant_expiry_timestamp, \n                    'guilty', c.guilty,\n                    'processed_by', c.processed_by, \n                    'processed', c.processed, \n                    'charges', c.charges\n                    )\n                ) ELSE NULL END AS civs, \n                CASE WHEN e.report_id IS NOT NULL THEN Json_arrayagg(\n                Json_object(\n                    'cid', e.cid, 'type', e.type, 'identifier', \n                    e.identifier, 'description', e.description, \n                    'resource_link_id', e.resource_link_id\n                    )\n                ) ELSE NULL END AS evidence, \n                CASE WHEN o.report_id IS NOT NULL THEN Json_arrayagg(\n                Json_object(\n                    'character_id', o.character_id, 'name', \n                    o.NAME, 'callsign', o.callsign, 'resource_link_id', \n                    o.resource_link_id\n                    )\n                ) ELSE NULL END AS officers, \n                CASE WHEN p.report_id IS NOT NULL THEN Json_arrayagg(\n                Json_object(\n                    'character_id', p.character_id, 'name', \n                    p.NAME, 'resource_link_id', p.resource_link_id\n                    )\n                ) ELSE NULL END AS persons, \n                CASE WHEN t.report_id IS NOT NULL THEN Json_arrayagg(\n                Json_object(\n                    'tag_id', t.tag_id, 'resource_link_id', \n                    t.resource_link_id\n                    )\n                ) ELSE NULL END AS tags, \n                CASE WHEN v.report_id IS NOT NULL THEN Json_arrayagg(\n                Json_object(\n                    'vin', v.vin, 'plate', v.plate, 'model', \n                    v.model, 'owner', v.owner, 'reason', \n                    v.reason, 'resource_link_id', v.resource_link_id\n                    )\n                ) ELSE NULL END AS vehicles \n            FROM\n                _mdt_report r \n                LEFT JOIN _mdt_report_civs c ON r.id = c.report_id \n                LEFT JOIN _mdt_report_evidence e ON r.id = e.report_id \n                LEFT JOIN _mdt_report_officers o ON r.id = o.report_id \n                LEFT JOIN _mdt_report_persons p ON r.id = p.report_id \n                LEFT JOIN _mdt_report_tags t ON r.id = t.report_id \n                LEFT JOIN _mdt_report_vehicles v ON r.id = v.report_id \n            WHERE\n                r.id = ?\n        ",[e])).map((e=>({id:e.id,title:e.title,description:e.description,created_by_state_id:e.created_by_state_id,created_by_name:e.created_by_name,timestamp:e.timestamp,report_category_id:e.report_category_id,report_category_name:e.report_category_name,civs:e.civs?JSON.parse(e.civs):[],tags:e.tags?JSON.parse(e.tags):[],evidence:e.evidence?JSON.parse(e.evidence):[],officers:e.officers?JSON.parse(e.officers):[],persons:e.persons?JSON.parse(e.persons):[],vehicles:e.vehicles?JSON.parse(e.vehicles):[]})))[0]]}static async editReport(e,t){if((null==t?void 0:t.tags)||(t.tags=[]),(null==t?void 0:t.evidence)||(t.evidence=[]),(null==t?void 0:t.officers)||(t.officers=[]),(null==t?void 0:t.persons)||(t.persons=[]),(null==t?void 0:t.vehicles)||(t.vehicles=[]),void 0!==t.id)return await SQL.execute("UPDATE _mdt_report SET title = ?, description = ?, created_by_state_id = ?, created_by_name = ?, timestamp = ? WHERE id = ?",[t.title,t.description,t.created_by_state_id,t.created_by_name,t.timestamp,t.id])?[!0,{id:t.id}]:[!1,[]];{const r=await SQL.execute("SELECT * FROM _mdt_report_category WHERE id = ?",[t.report_category_id]);if(!r)return[!1,[]];const a=await i.Base.getModule("Player").GetUser(e);if(!a)return[!1,[]];const s=await SQL.execute("INSERT INTO _mdt_report (title, description, created_by_state_id, created_by_name, timestamp, report_category_id, report_category_name) VALUES (?, ?, ?, ?, ?, ?, ?)",[t.title,t.description,a.character.id,`${a.character.first_name} ${a.character.last_name}`,Date.now()/1e3,t.report_category_id,r[0].name]);return s?[!0,{id:s.insertId}]:[!1,[]]}}static async searchReports(e){const t=await SQL.execute("SELECT * FROM _mdt_report WHERE title LIKE ? AND NOT id = ? OR NOT id = ? ORDER BY id DESC",[`%${e.title}%`,1,7]);return t?[!0,t]:[!1,[]]}static async getIncidents(e){let t=await SQL.execute("SELECT * FROM _mdt_report WHERE report_category_id = ? ORDER BY id DESC",[1]);return t?[!0,t.map((e=>({id:e.id,title:e.title,description:e.description,created_by_state_id:e.created_by_state_id,created_by_name:e.created_by_name,timestamp:e.timestamp,report_category_id:e.report_category_id,report_category_name:e.report_category_name})))]:[!1,[]]}static async getIncident(e){var t,r;const i=(await SQL.execute("\n            SELECT \n                r.id, \n                r.title, \n                r.description, \n                r.created_by_state_id, \n                r.created_by_name, \n                r.timestamp, \n                r.report_category_id, \n                r.report_category_name, \n                CASE WHEN c.report_id IS NOT NULL THEN Json_arrayagg(\n                Json_object(\n                    'character_id', c.character_id,\n                    'warrant', c.warrant,\n                    'warrant_expiry_timestamp', c.warrant_expiry_timestamp, \n                    'guilty', c.guilty,\n                    'processed_by', c.processed_by, \n                    'processed', c.processed, \n                    'charges', c.charges\n                    )\n                ) ELSE NULL END AS civs, \n                CASE WHEN e.report_id IS NOT NULL THEN Json_arrayagg(\n                Json_object(\n                    'cid', e.cid, 'type', e.type, 'identifier', \n                    e.identifier, 'description', e.description, \n                    'resource_link_id', e.resource_link_id\n                    )\n                ) ELSE NULL END AS evidence, \n                CASE WHEN o.report_id IS NOT NULL THEN Json_arrayagg(\n                Json_object(\n                    'character_id', o.character_id, 'name', \n                    o.NAME, 'callsign', o.callsign, 'resource_link_id', \n                    o.resource_link_id\n                    )\n                ) ELSE NULL END AS officers, \n                CASE WHEN p.report_id IS NOT NULL THEN Json_arrayagg(\n                Json_object(\n                    'character_id', p.character_id, 'name', \n                    p.NAME, 'resource_link_id', p.resource_link_id\n                    )\n                ) ELSE NULL END AS persons, \n                CASE WHEN t.report_id IS NOT NULL THEN Json_arrayagg(\n                Json_object(\n                    'tag_id', t.tag_id, 'resource_link_id', \n                    t.resource_link_id\n                    )\n                ) ELSE NULL END AS tags, \n                CASE WHEN v.report_id IS NOT NULL THEN Json_arrayagg(\n                Json_object(\n                    'vin', v.vin, 'plate', v.plate, 'model', \n                    v.model, 'owner', v.owner, 'reason', \n                    v.reason, 'resource_link_id', v.resource_link_id\n                    )\n                ) ELSE NULL END AS vehicles \n            FROM\n                _mdt_report r \n                LEFT JOIN _mdt_report_civs c ON r.id = c.report_id \n                LEFT JOIN _mdt_report_evidence e ON r.id = e.report_id \n                LEFT JOIN _mdt_report_officers o ON r.id = o.report_id \n                LEFT JOIN _mdt_report_persons p ON r.id = p.report_id \n                LEFT JOIN _mdt_report_tags t ON r.id = t.report_id \n                LEFT JOIN _mdt_report_vehicles v ON r.id = v.report_id \n            WHERE\n                r.id = ?\n        ",[e])).map((e=>({id:e.id,title:e.title,description:e.description,created_by_state_id:e.created_by_state_id,created_by_name:e.created_by_name,timestamp:e.timestamp,report_category_id:e.report_category_id,report_category_name:e.report_category_name,civs:e.civs?JSON.parse(e.civs):[],tags:e.tags?JSON.parse(e.tags):[],evidence:e.evidence?JSON.parse(e.evidence):[],officers:e.officers?JSON.parse(e.officers):[],persons:e.persons?JSON.parse(e.persons):[],vehicles:e.vehicles?JSON.parse(e.vehicles):[]})));for(const e of i[0].civs){const i=await SQL.execute("SELECT name, parole_end_timestamp FROM _mdt_profile_civ WHERE character_id = ?",[e.character_id]),a=Array.isArray(i)?i[0]:i,s=await SQL.execute("SELECT * FROM _mdt_warrant WHERE cid = ?",[e.character_id]);e.id=e.character_id,e.name=null!==(t=null==a?void 0:a.name)&&void 0!==t?t:"Unknown",e.parole_end_timestamp=null!==(r=null==a?void 0:a.parole_end_timestamp)&&void 0!==r?r:0,e.warrants=null!=s?s:[],e.charges=e.charges?JSON.parse(e.charges):[]}return[!0,i[0]]}static async editIncident(e,t){if((null==t?void 0:t.tags)||(t.tags=[]),(null==t?void 0:t.evidence)||(t.evidence=[]),(null==t?void 0:t.officers)||(t.officers=[]),(null==t?void 0:t.persons)||(t.persons=[]),(null==t?void 0:t.vehicles)||(t.vehicles=[]),void 0!==t.id)return await SQL.execute("UPDATE _mdt_report SET title = ?, description = ?, created_by_state_id = ?, created_by_name = ?, timestamp = ? WHERE id = ?",[t.title,t.description,t.created_by_state_id,t.created_by_name,t.timestamp,t.id])?[!0,{id:t.id}]:[!1,[]];{const r=await SQL.execute("SELECT * FROM _mdt_report_category WHERE id = ?",[1]);if(!r)return[!1,[]];const a=await i.Base.getModule("Player").GetUser(e);if(!a)return[!1,[]];const s=await SQL.execute("INSERT INTO _mdt_report (title, description, created_by_state_id, created_by_name, timestamp, report_category_id, report_category_name) VALUES (?, ?, ?, ?, ?, ?, ?)",[t.title,t.description,a.character.id,`${a.character.first_name} ${a.character.last_name}`,Date.now()/1e3,1,r[0].name]);return s?[!0,{id:s.insertId}]:[!1,[]]}}static async searchIncidents(e){const t=await SQL.execute("SELECT * FROM _mdt_report WHERE title LIKE ? AND id = ? ORDER BY id DESC",[`%${e.title}%`,1]);return t?[!0,t]:[!1,[]]}static async editIncidentCiv(e){const t=await SQL.execute("SELECT * FROM _mdt_report_civs WHERE report_id = ? AND character_id = ?",[e.incident_id,e.profile_civ_id]);if(t.length>0){if(!await SQL.execute("UPDATE _mdt_report_civs SET warrant = ?, warrant_expiry_timestamp = ?, processed_by = ?, processed = ?, guilty = ? WHERE report_id = ? AND character_id = ?",[e.warrant,e.warrant_expiry_timestamp,e.processed_by,e.processed,e.guilty,e.incident_id,e.profile_civ_id]))return[!1,[]];if(1==e.processed){const r=t[0].charges,i=r?JSON.parse(r):[];for(const t of i)if(!await SQL.execute("INSERT INTO _mdt_prior (charge_id, character_id, name) VALUES (?, ?, ?)",[t.id,e.profile_civ_id,t.name]))return[!1,[]]}if(1==e.warrant){if((await SQL.execute("SELECT * FROM _mdt_warrant WHERE incident_id = ? AND cid = ?",[e.incident_id,e.profile_civ_id])).length>0)return[!1,[]];if(!await SQL.execute("INSERT INTO _mdt_warrant (incident_id, warrant_expiry_timestamp, cid) VALUES (?, ?, ?)",[e.incident_id,e.warrant_expiry_timestamp,e.profile_civ_id]))return[!1,[]]}}else if(!await SQL.execute("INSERT INTO _mdt_report_civs (report_id, character_id, warrant, warrant_expiry_timestamp, processed_by, processed, guilty) VALUES (?, ?, ?, ?, ?, ?, ?)",[e.incident_id,e.profile_civ_id,e.warrant,e.warrant_expiry_timestamp,e.processed_by,e.processed,e.guilty]))return[!1,[]];return[!0,[]]}static async editIncidentCivCharges(e){return await SQL.execute("SELECT * FROM _mdt_report_civs WHERE report_id = ? AND character_id = ?",[e.incident_id,e.profile_civ_id])&&await SQL.execute("UPDATE _mdt_report_civs SET charges = ? WHERE report_id = ? AND character_id = ?",[JSON.stringify(e.charges),e.incident_id,e.profile_civ_id])?[!0,[]]:[!1,[]]}static async removeIncidentCiv(e){return await SQL.execute("SELECT * FROM _mdt_report_civs WHERE report_id = ? AND character_id = ?",[e.incident_id,e.profile_civ_id])&&await SQL.execute("DELETE FROM _mdt_report_civs WHERE report_id = ? AND character_id = ?",[e.incident_id,e.profile_civ_id])?[!0,{}]:[!1,[]]}static async addResourceLink(e){switch(e.resource_type){case"report":(async()=>{switch(e.source_type){case"tag":break;case"profile":const t=await SQL.execute("SELECT * FROM characters WHERE id = ?",[e.source_id]);return t?(await SQL.execute("SELECT * FROM _mdt_report_persons WHERE report_id = ? AND character_id = ?",[e.resource_id,e.source_id])).length>0?[!1,[]]:await SQL.execute("INSERT INTO _mdt_report_persons (report_id, character_id, name, resource_link_id) VALUES (?, ?, ?, ?)",[e.resource_id,e.source_id,`${t[0].first_name} ${t[0].last_name}`,Math.floor(999999*Math.random())])?[!0,[]]:[!1,[]]:[!1,[]];case"officer":if((await SQL.execute("SELECT * FROM _mdt_report_officers WHERE report_id = ? AND character_id = ?",[e.resource_id,e.source_id])).length>0)return[!1,[]];const r=await SQL.execute("\n                        SELECT \n                            p.character_id,\n                            CONCAT(c.first_name, ' ', c.last_name) AS name,\n                            p.callsign\n                        FROM\n                            _mdt_profile_officer p\n                            LEFT JOIN characters c ON p.character_id = c.id\n                        WHERE\n                            p.character_id = ?\n                        GROUP BY\n                            p.character_id,\n                            c.first_name,\n                            c.last_name,\n                            p.callsign\n                    ",[e.source_id]);r&&await SQL.execute("INSERT INTO _mdt_report_officers (report_id, character_id, name, callsign, resource_link_id) VALUES (?, ?, ?, ?, ?)",[e.resource_id,r[0].character_id,r[0].name,r[0].callsign,Math.floor(999999*Math.random())])}})();break;case"incident":(async()=>{switch(e.source_type){case"tag":break;case"profile":const t=await SQL.execute("SELECT * FROM characters WHERE id = ?",[e.source_id]);return t?(await SQL.execute("SELECT * FROM _mdt_report_persons WHERE report_id = ? AND character_id = ?",[e.resource_id,e.source_id])).length>0?[!1,[]]:await SQL.execute("INSERT INTO _mdt_report_persons (report_id, character_id, name, resource_link_id) VALUES (?, ?, ?, ?)",[e.resource_id,e.source_id,`${t[0].first_name} ${t[0].last_name}`,Math.floor(999999*Math.random())])?[!0,[]]:[!1,[]]:[!1,[]];case"officer":if((await SQL.execute("SELECT * FROM _mdt_report_officers WHERE report_id = ? AND character_id = ?",[e.resource_id,e.source_id])).length>0)return[!1,[]];const r=await SQL.execute("\n                        SELECT \n                            p.character_id,\n                            CONCAT(c.first_name, ' ', c.last_name) AS name,\n                            p.callsign\n                        FROM\n                            _mdt_profile_officer p\n                            LEFT JOIN characters c ON p.character_id = c.id\n                        WHERE\n                            p.character_id = ?\n                        GROUP BY\n                            p.character_id,\n                            c.first_name,\n                            c.last_name,\n                            p.callsign\n                    ",[e.source_id]);r&&await SQL.execute("INSERT INTO _mdt_report_officers (report_id, character_id, name, callsign, resource_link_id) VALUES (?, ?, ?, ?, ?)",[e.resource_id,r[0].character_id,r[0].name,r[0].callsign,Math.floor(999999*Math.random())])}})();break;case"evidence":case"officer":case"profile":e.source_type}return[!0,[]]}static async removeResourceLink(e){if(!e.source_type||null===e.source_type||void 0===e.source_type||""===e.source_type){const t=e.resource_link_id,r=await SQL.execute("SELECT * FROM _mdt_report_officers WHERE resource_link_id = ?",[t]);if(r.length>0){const e=r[0];if(!await SQL.execute("DELETE FROM _mdt_report_officers WHERE id = ?",[e.id]))return[!1,[]]}const i=await SQL.execute("SELECT * FROM _mdt_report_persons WHERE resource_link_id = ?",[t]);if(i.length>0){const e=i[0];if(!await SQL.execute("DELETE FROM _mdt_report_persons WHERE id = ?",[e.id]))return[!1,[]]}const a=await SQL.execute("SELECT * FROM _mdt_report_tags WHERE resource_link_id = ?",[t]);if(a.length>0){const e=a[0];if(!await SQL.execute("DELETE FROM _mdt_report_tags WHERE id = ?",[e.id]))return[!1,[]]}const s=await SQL.execute("SELECT * FROM _mdt_report_vehicles WHERE resource_link_id = ?",[t]);if(s.length>0){const e=s[0];if(!await SQL.execute("DELETE FROM _mdt_report_vehicles WHERE id = ?",[e.id]))return[!1,[]]}const n=await SQL.execute("SELECT * FROM _mdt_report_evidence WHERE resource_link_id = ?",[t]);if(n.length>0){const e=n[0];if(!await SQL.execute("DELETE FROM _mdt_report_evidence WHERE id = ?",[e.id]))return[!1,[]]}return[!0,[]]}return"cert"===e.source_type?[!0,[]]:[!1,[]]}static async deleteResourceItem(e){if(e.idField){if(!await SQL.execute("DELETE FROM ?? WHERE ?? = ?",[e.table,e.idField,e.id]))return[!1,[]]}else if(!await SQL.execute("DELETE FROM ?? WHERE id = ?",[e.table,e.id]))return[!1,[]];return[!0,[]]}static async addEvidenceToResource(e){if(e.create)switch(e.type){case"report":break;case"incident":return(await SQL.execute("SELECT * FROM _mdt_report_evidence WHERE report_id = ? AND identifier = ?",[e.source_id,e.evidence.identifier])).length>0?[!1,[]]:await SQL.execute("INSERT INTO _mdt_report_evidence (report_id, cid, type, identifier, description, resource_link_id) VALUES (?, ?, ?, ?, ?, ?)",[e.source_id,e.evidence.cid,e.evidence.type,e.evidence.identifier,e.evidence.description,Math.floor(999999*Math.random())])?[!0,[]]:[!1,[]]}else switch(e.type){case"report":break;case"incident":return e.identifier?0===(await SQL.execute("SELECT * FROM _mdt_report_evidence WHERE id = ?",[e.identifier])).length?[!1,[]]:await SQL.execute("UPDATE _mdt_report_evidence SET report_id = ?, resource_link_id = ? WHERE id = ?",[e.source_id,Math.floor(999999*Math.random()),e.identifier])?[!0,[]]:[!1,[]]:[!1,[]]}return[!0,[]]}static async createEvidenceVehicle(e){switch(e.resourceType){case"report":if((await SQL.execute("SELECT * FROM _mdt_report_vehicles WHERE report_id = ? AND plate = ?",[e.resourceId,e.vehicle.plate])).length>0)return[!1,[]];const t=await SQL.execute("SELECT * FROM _vehicle WHERE plate = ?",[e.vehicle.plate]);if(0===t.length)return[!1,[]];const r=await SQL.execute("SELECT * FROM characters WHERE id = ?",[t[0].cid]);return 0===r.length?[!1,[]]:await SQL.execute("INSERT INTO _mdt_report_vehicles (report_id, vin, plate, model, owner, reason, resource_link_id) VALUES (?, ?, ?, ?, ?, ?, ?)",[e.resourceId,t[0].vin,e.vehicle.plate,t[0].model,`${r[0].first_name} ${r[0].last_name}`,e.vehicle.reason,Math.floor(999999*Math.random())])?[!0,[]]:[!1,[]];case"incident":if((await SQL.execute("SELECT * FROM _mdt_report_vehicles WHERE report_id = ? AND plate = ?",[e.resourceId,e.vehicle.plate])).length>0)return[!1,[]];const i=await SQL.execute("SELECT * FROM _vehicle WHERE plate = ?",[e.vehicle.plate]);if(0===i.length)return[!1,[]];const a=await SQL.execute("SELECT * FROM characters WHERE id = ?",[i[0].cid]);return 0===a.length?[!1,[]]:await SQL.execute("INSERT INTO _mdt_report_vehicles (report_id, vin, plate, model, owner, reason, resource_link_id) VALUES (?, ?, ?, ?, ?, ?, ?)",[e.resourceId,i[0].vin,e.vehicle.plate,i[0].model,`${a[0].first_name} ${a[0].last_name}`,e.vehicle.reason,Math.floor(999999*Math.random())])?[!0,[]]:[!1,[]]}return[!0,[]]}static async addRolePermission(e){var t;const r=await SQL.execute("SELECT permissions FROM _mdt_profile_officer_role WHERE id = ?",[e.roleId]);if(!r)return[!1,[]];const i=JSON.parse(null!==(t=r[0].permissions)&&void 0!==t?t:"[]");return i.push(e.permission),await SQL.execute("UPDATE _mdt_profile_officer_role SET permissions = ? WHERE id = ?",[JSON.stringify(i),e.roleId])?[!0,[]]:[!1,[]]}static async getRolePermissions(e){var t;const r=await SQL.execute("SELECT permissions FROM _mdt_profile_officer_role WHERE id = ?",[e.roleId]);return r?[!0,JSON.parse(null!==(t=r[0].permissions)&&void 0!==t?t:"[]")]:[!1,[]]}static async hasConfigPermission(e,t){const r=i.Base.getModule("Player").GetUser(e);if(!r)return[!1,""];const a=r.getVar("hexid"),s=await SQL.execute("SELECT * FROM _mdt_config_access WHERE steam_id = ?",[a]);return s?0===s.length?[!1,""]:[!0,a]:[!1,""]}static async getAllConfigOptions(e){if(!e.table||""==e.table)return[!1,[]];if(e.table&&!e.table.startsWith("_mdt_"))return[!1,[]];const t=await SQL.execute("SELECT * FROM ?? ORDER BY id DESC",[e.table]);return t?[!0,t]:[!1,[]]}static async insertConfigOption(e){if(!e.table||""==e.table)return[!1,[]];if(e.table&&!e.table.startsWith("_mdt_"))return[!1,[]];const t=Object.keys(e.data).join(", "),r=Object.values(e.data).map((e=>JSON.stringify(e))).join(", ").replace(/"/g,"");return await SQL.execute("INSERT INTO ?? (??) VALUES (?)",[e.table,t,r])?[!0,[]]:[!1,[]]}static async updateConfigOption(e){if(!e.table||""==e.table)return[!1,[]];if(e.table&&!e.table.startsWith("_mdt_"))return[!1,[]];const t=Object.keys(e.data).join(" = ?, ")+" = ?",r=Object.values(e.data),i=[e.useCharacterId?"character_id":"id"];let a,s="";for(const[t,r]of Object.entries(e.data))if(i.includes(t)){s=t,a=r;break}return s&&await SQL.execute("UPDATE ?? SET "+t+" WHERE ?? = ?",[e.table,...r,s,a])?[!0,[]]:[!1,[]]}static async getWarrants(){const e=await SQL.execute("\n            SELECT\n                w.incident_id,\n                w.warrant_expiry_timestamp,\n                r.title AS incident_title,\n                c.name AS civ_name,\n                c.profile_image_url\n            FROM\n                _mdt_warrant AS w\n                JOIN _mdt_report AS r ON w.incident_id = r.id\n                JOIN _mdt_profile_civ AS c ON c.character_id = w.cid;        \n        ");return e?[!0,e]:[!1,[]]}static async getBolos(){const e=await SQL.execute("SELECT id, title, description, timestamp FROM _mdt_report WHERE report_category_id = 3");return e?[!0,e]:[!1,[]]}static async getBulletins(){const e=await SQL.execute("SELECT id, title, description, timestamp FROM _mdt_report WHERE report_category_id = 8");return e?[!0,e]:[!1,[]]}static async getEvidence(e){if(e.identifier&&""!=e.identifier){const t=await SQL.execute("SELECT id, type, identifier, description, cid FROM _mdt_report_evidence WHERE identifier LIKE ?",[`%${e.identifier}%`]);return t?[!0,t.length>0?t.map((e=>({...e,tags:[]}))):[]]:[!1,[]]}{const e=await SQL.execute("SELECT id, type, identifier, description, cid FROM _mdt_report_evidence");return e?[!0,e.length>0?e.map((e=>({...e,tags:[]}))):[]]:[!1,[]]}}static async getSingleEvidence(e){var t;const r=await SQL.execute("SELECT id, type, identifier, description, cid FROM _mdt_report_evidence WHERE id = ?",[e.id]);return r?[!0,null!==(t=r[0])&&void 0!==t?t:{}]:[!1,[]]}static async editEvidence(e){return(null==e?void 0:e.tags)||(e.tags=[]),void 0!==e.id?await SQL.execute("UPDATE _mdt_report_evidence SET type = ?, identifier = ?, description = ?, cid = ? WHERE id = ?",[e.type,e.identifier,e.description,e.cid,e.id])?[!0,[]]:[!1,[]]:await SQL.execute("INSERT INTO _mdt_report_evidence (cid, type, identifier, description) VALUES (?, ?, ?, ?)",[e.cid,e.type,e.identifier,e.description])?[!0,[]]:[!1,[]]}static async changeVehicleData(e){return"plate"!==e.type||await SQL.execute("UPDATE _vehicle SET plate = ? WHERE vin = ?",[e.value,e.vin])?[!0,[]]:[!1,[]]}static async updateImpoundData(e){return[!0,[]]}static async expungeCiv(e){return await SQL.execute("DELETE FROM _mdt_prior WHERE character_id = ?",[e.profile_civ_id])?[!0,[]]:[!1,[]]}static async resetDrivingPoints(e){return await SQL.execute("UPDATE _mdt_profile_civ SET drivers_points = 0 WHERE character_id = ?",[e.id])?[!0,[]]:[!1,[]]}static async editCivilianProfile(e,t=!1){const r=await SQL.execute("SELECT * FROM _mdt_profile_civ WHERE character_id = ?",[e.character_id]);if(!r)return[!1,[]];if(0==r.length){if(console.log("Profile does not exist, creating..."),!await SQL.execute("\n                INSERT INTO _mdt_profile_civ (character_id, name, profile_image_url, summary) VALUES (?, ?, ?, ?)",[e.character_id,e.name,e.profile_image_url,e.summary]))return[!1,[]]}else{if(console.log("Profile exists, updating..."),t)return[!0,[]];if(console.log("Attempting to update..."),!await SQL.execute("\n                UPDATE _mdt_profile_civ SET name = ?, profile_image_url = ?, summary = ? WHERE character_id = ?",[e.name,e.profile_image_url,e.summary,e.character_id]))return[!1,[]];console.log("Updated!")}return[!0,[]]}static async getTags(){const e=await SQL.execute("SELECT * FROM _mdt_tag");return e?[!0,e]:[!1,[]]}static async getTagCategories(){const e=await SQL.execute("SELECT * FROM _mdt_tag_category");return e?[!0,e]:[!1,[]]}static async editTag(e){return await SQL.execute("SELECT * FROM _mdt_tag WHERE category_id = ? AND text = ?",[e.category_id,e.text])?[!1,[]]:await SQL.execute("INSERT INTO _mdt_tag (category_id, text) VALUES (?, ?)",[e.category_id,e.text])?[!0,[]]:[!1,[]]}static async getCerts(){const e=await SQL.execute("SELECT * FROM _mdt_cert");return e?[!0,e]:[!1,[]]}static async editCert(e){return await SQL.execute("SELECT * FROM _mdt_cert WHERE name = ? AND description = ?",[e.name,e.description])?[!1,[]]:await SQL.execute("INSERT INTO _mdt_cert (name, description) VALUES (?, ?)",[e.name,e.description])?[!0,[]]:[!1,[]]}static async checkExpiredWarrants(){const e=await SQL.execute("SELECT * FROM _mdt_warrant WHERE warrant_expiry_timestamp < ?",[Date.now()/1e3]);if(e)for(const t of e)if(!await SQL.execute("DELETE FROM _mdt_warrant WHERE id = ?",[t.id]))return}}},483:function(e,t,r){var i=this&&this.__createBinding||(Object.create?function(e,t,r,i){void 0===i&&(i=r),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,i){void 0===i&&(i=r),e[i]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&i(t,e,r);return a(t,e),t},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const c=r(570),o=s(r(741)),d=r(286);n(r(935)),(async()=>{await o.Init(),await(async()=>{setTick((async()=>{const e=process.memoryUsage().heapUsed,t=Math.round(e/1024/1024*100)/100;console.log(`[JS USED HEAP SIZE](${Date.now()}): ${t} MB`),await(0,c.Delay)(12e4)}))})(),await d.Repository.checkExpiredWarrants()})()},988:function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.DB=t.Base=t.Utils=t.Procedures=t.Events=void 0,t.Events={on:(e,t)=>CPX.Events.on(e,t),onNet:(e,t)=>CPX.Events.onNet(e,t),emit:(e,...t)=>CPX.Events.emit(e,...t),emitNet:(e,...t)=>CPX.Events.emitNet(e,...t),remove:(e,t)=>CPX.Events.remove(e,t)},t.Procedures={register:(e,t)=>CPX.Procedures.register(e,t),execute:(e,...t)=>CPX.Procedures.execute(e,...t)},t.Utils={cache:(e,t)=>CPX.Utils.cache(e,t),cacheableMap:(e,t)=>CPX.Utils.cacheableMap(e,t),waitForCondition:(e,t)=>CPX.Utils.waitForCondition(e,t),getMapRange:(e,t,r)=>CPX.Utils.getMapRange(e,t,r),getDistance:([e,t,r],[i,a,s])=>CPX.Utils.getDistance([e,t,r],[i,a,s]),getRandomNumber:(e,t)=>CPX.Utils.getRandomNumber(e,t)},t.Base={getModule:e=>{if("Player"===e)return{GetUser:t=>{const i=r.g.exports["ev-base"].getModule(e).GetUser(this,t);return!!i&&{source:i.source,name:i.name,comid:i.comid,steamid:i.steamid,hexid:i.hexid,license:i.license,ip:i.ip,job:i.job,rank:i.rank,character:i.character,characters:i.characters,characterLoaded:i.characterLoaded,charactersLoaded:i.charactersLoaded,getVar:e=>i.getVar(i,e),setVar:(e,t)=>i.setVar(i,e,t),networkVar:(e,t)=>i.networkVar(i,e,t),getRank:()=>i.getRank(i),setRank:e=>i.setRank(i,e),setCharacter:e=>i.setCharacter(i,e),setCharacters:e=>i.setCharacters(i,e),getCash:()=>i.getCash(i),getBalance:()=>i.getBalance(i),getDirtyMoney:()=>i.getDirtyMoney(i),getGangType:()=>i.getGangType(i),getStressLevel:()=>i.getStressLevel(i),getJudgeType:()=>i.getJudgeType(i),alterDirtyMoney:e=>i.alterDirtyMoney(i,e),alterStressLevel:e=>i.alterStressLevel(i,e),resetDirtyMoney:()=>i.resetDirtyMoney(i),addMoney:a=>{const s=i.getCash(i);i.addMoney(i,a);const n=r.g.exports["ev-base"].getModule(e).GetUser(this,t);return n.getCash(n)>=s},removeMoney:a=>{const s=i.character.cash;i.removeMoney(i,a);const n=r.g.exports["ev-base"].getModule(e).GetUser(this,t);return n.getCash(n)<=s},addBank:a=>{const s=i.getBalance(i);i.addBank(i,a);const n=r.g.exports["ev-base"].getModule(e).GetUser(this,t);return n.getBalance(n)>=s},removeBank:a=>{const s=i.getBalance(i);i.removeBank(i,a);const n=r.g.exports["ev-base"].getModule(e).GetUser(this,t);return n.getBalance(n)<=s},getNumCharacters:()=>i.getNumCharacters(i),ownsCharacter:e=>i.ownsCharacter(i,e),getGender:()=>i.getGender(i),getCharacter:e=>i.getCharacter(i,e),getCharacters:()=>i.getCharacters(i),getCurrentCharacter:()=>i.getCurrentCharacter(i)}}}}},t.DB={execute:(e,t)=>CPX.DB.execute(e,t),insert:(e,t)=>CPX.DB.insert(e,t),prepare:(e,t)=>CPX.DB.prepare(e,t),query:(e,t)=>CPX.DB.query(e,t),scalar:(e,t)=>CPX.DB.scalar(e,t),single:(e,t)=>CPX.DB.single(e,t),transaction:(e,t)=>CPX.DB.transaction(e,t),update:(e,t)=>CPX.DB.update(e,t)}},570:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.genNumbers=t.getRandom=t.loadAnimDict=t.taskBar=t.Delay=void 0,t.Delay=e=>new Promise((t=>setTimeout(t,e))),t.taskBar=function(e,t,i=!1){return new Promise((a=>{t?r.g.exports["ev-taskbar"].taskBar(e,t,i,!0,null,!1,a):setTimeout((()=>a(100)),e)}))},t.loadAnimDict=async function(e){for(;!HasAnimDictLoaded(e);)RequestAnimDict(e),await(0,t.Delay)(5)},t.getRandom=(e,t)=>Math.floor(Math.random()*(t-e))+e,t.genNumbers=e=>{let t="",r="0123456789",i=r.length;for(let a=1;a<e;a++)t+=r.charAt(Math.floor(Math.random()*i));return t}},935:(e,t,r)=>{e.exports=r(232)},232:()=>{}},t={};function r(i){var a=t[i];if(void 0!==a)return a.exports;var s=t[i]={exports:{}};return e[i].call(s.exports,s,s.exports,r),s.exports}r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r(483)})();